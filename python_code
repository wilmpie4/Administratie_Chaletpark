# imported classes for widget
import sys
import datetime
from PyQt5 import QtWidgets as qw
from PyQt5 import QtGui as qg
from PyQt5 import QtCore as qc


# imported classes for data
import pyodbc as odbc
import pandas as pd
import numpy as np


# APP
class GUI(qw.QMainWindow):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    # Open main window
    def __init__(self):
        qw.QMainWindow.__init__(self)
        
        self.title = 'Rihend'
        self.top = 30
        self.left = 0
        self.width = 1100
        self.height = 600
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)
        self.initAPP()
        

    # Adding widgets to main window
    def initAPP(self):
        menubar = self.menuBar()
        overzicht_menu  = menubar.addMenu('Overzicht')
        facturen_menu   = menubar.addMenu('Facturen')
        inv_menu        = menubar.addMenu('Investeringen')
        int_kosten_menu = menubar.addMenu('Interne Kosten')
        ext_kosten_menu = menubar.addMenu('Externe Kosten')
        staanpl_menu    = menubar.addMenu('Staanplaatsen')
        stroom_menu     = menubar.addMenu('Stroom')
        stroom_menu_invoeren = stroom_menu.addMenu('Invoeren')
        periode_menu    = menubar.addMenu('Periode')

        #overzicht_menu
        overzicht_totaal = qw.QAction('Totaal Overzicht', self)
        overzicht_menu.addAction(overzicht_totaal)
        overzicht_totaal.triggered.connect(self.overzicht_totaal)
        
        #facturen_menu
        fact_overzicht = qw.QAction('Overzicht', self)
        facturen_menu.addAction(fact_overzicht)
        fact_overzicht.triggered.connect(self.fact_overzicht)

        fact_invoer = qw.QAction('Invoeren', self)
        facturen_menu.addAction(fact_invoer)
        fact_invoer.triggered.connect(self.fact_invoer)

        fact_delete = qw.QAction('Verwijderen', self)
        facturen_menu.addAction(fact_delete)
        fact_delete.triggered.connect(self.fact_delete)

        #inv_menu
        inv_overzicht = qw.QAction('Overzicht', self)
        inv_menu.addAction(inv_overzicht)
        inv_overzicht.triggered.connect(self.inv_overzicht)

        inv_invoer = qw.QAction('Invoeren', self)
        inv_menu.addAction(inv_invoer)
        inv_invoer.triggered.connect(self.inv_invoer)

        inv_doorrekenen = qw.QAction('Doorrekenen', self)
        inv_menu.addAction(inv_doorrekenen)
        inv_doorrekenen.triggered.connect(self.inv_doorrekenen)

        inv_delete = qw.QAction('Verwijderen', self)
        inv_menu.addAction(inv_delete)
        inv_delete.triggered.connect(self.inv_delete)

        #int_kosten_menu
        int_kosten_overzicht = qw.QAction('Overzicht', self)
        int_kosten_menu.addAction(int_kosten_overzicht)
        int_kosten_overzicht.triggered.connect(self.int_kosten_overzicht)

        int_kosten_invoer = qw.QAction('Invoer', self)
        int_kosten_menu.addAction(int_kosten_invoer)
        int_kosten_invoer.triggered.connect(self.int_kosten_invoer)

        int_kosten_delete = qw.QAction('Verwijderen', self)
        int_kosten_menu.addAction(int_kosten_delete)
        int_kosten_delete.triggered.connect(self.int_kosten_delete)

        int_kosten_doorrekenen = qw.QAction('Doorrekenen', self)
        int_kosten_menu.addAction(int_kosten_doorrekenen)
        int_kosten_doorrekenen.triggered.connect(self.int_kosten_doorrekenen)

        #ext_kosten_menu
        ext_kosten_overzicht = qw.QAction('Overzicht', self)
        ext_kosten_menu.addAction(ext_kosten_overzicht)
        ext_kosten_overzicht.triggered.connect(self.ext_kosten_overzicht)

        ext_kosten_invoer = qw.QAction('Invoer', self)
        ext_kosten_menu.addAction(ext_kosten_invoer)
        ext_kosten_invoer.triggered.connect(self.ext_kosten_invoer)

        ext_kosten_delete = qw.QAction('Verwijderen', self)
        ext_kosten_menu.addAction(ext_kosten_delete)
        ext_kosten_delete.triggered.connect(self.ext_kosten_delete)

        #staanpl_menu
        staanpl_overzicht = qw.QAction('Overzicht', self)
        staanpl_menu.addAction(staanpl_overzicht)
        staanpl_overzicht.triggered.connect(self.staanpl_overzicht)

        staanpl_update = qw.QAction('Aanpassen', self)
        staanpl_menu.addAction(staanpl_update)
        staanpl_update.triggered.connect(self.staanpl_update)

        #stroom_menu
        stroomkosten_overzicht = qw.QAction('Kosten Overzicht', self)
        stroom_menu.addAction(stroomkosten_overzicht)
        stroomkosten_overzicht.triggered.connect(self.stroomkosten_overzicht)

        stroomverbruik_overzicht = qw.QAction('Verbruik Overzicht', self)
        stroom_menu.addAction(stroomverbruik_overzicht)
        stroomverbruik_overzicht.triggered.connect(self.stroomverbruik_overzicht)

        stroomperkwh_overzicht = qw.QAction('Kosten per KWH', self)
        stroom_menu.addAction(stroomperkwh_overzicht)
        stroomperkwh_overzicht.triggered.connect(self.stroomperkwh_overzicht)

        stroom_doorrekenen = qw.QAction('Kosten doorrekenen naar extern', self)
        stroom_menu.addAction(stroom_doorrekenen)
        stroom_doorrekenen.triggered.connect(self.stroom_doorrekenen)

        verlichting_overzicht = qw.QAction('Verlichting', self)
        stroom_menu.addAction(verlichting_overzicht)
        verlichting_overzicht.triggered.connect(self.verlichting_overzicht)

        #stroom_menu_invoeren

        stroom_invoeren_tot = qw.QAction('Stroom verbruik totaal', self)
        stroom_menu_invoeren.addAction(stroom_invoeren_tot)
        stroom_invoeren_tot.triggered.connect(self.stroom_invoeren_tot)

        stroom_invoeren_ver = qw.QAction('Stroom verbruik verdeeld', self)
        stroom_menu_invoeren.addAction(stroom_invoeren_ver)
        stroom_invoeren_ver.triggered.connect(self.stroom_invoeren_ver)

        stroom_invoeren_kost = qw.QAction('Stroom kosten', self)
        stroom_menu_invoeren.addAction(stroom_invoeren_kost)
        stroom_invoeren_kost.triggered.connect(self.stroom_invoeren_kost)

        verlichting_invoeren = qw.QAction('Verlichting', self)
        stroom_menu_invoeren.addAction(verlichting_invoeren)
        verlichting_invoeren.triggered.connect(self.verlichting_invoeren)

        #periode_menu
        periode_overzicht = qw.QAction('Overzicht', self)
        periode_menu.addAction(periode_overzicht)
        periode_overzicht.triggered.connect(self.periode_overzicht)

        periode_update = qw.QAction('Aanpassen', self)
        periode_menu.addAction(periode_update)
        periode_update.triggered.connect(self.periode_update)

        #table
        self.table = qw.QTableWidget(self)
        self.table.setRowCount(20)
        self.table.setColumnCount(10)

        self.tablewidth = self.table.columnCount()*102.5
        self.table.setGeometry(qc.QRect(20,55,self.tablewidth,500))
        self.table.cellClicked.connect(self.cell_was_clicked)


        self.show()

    # Adding functions

    #overzicht
    def overzicht_totaal(self):
        sql_overzicht_totaal = "select * from overzicht_totaal order by jaar desc"
        df_overzicht_totaal = pd.read_sql(sql_overzicht_totaal, GUI.cnxn)
        self.create_table(df_overzicht_totaal)

    #fact
    def fact_overzicht(self):
        sql_fact_overzicht =  "select * from overzicht_factuur order by periode desc"
        df_fact_overzicht = pd.read_sql(sql_fact_overzicht, GUI.cnxn)
        self.create_table(df_fact_overzicht)

    def fact_invoer(self):
        self.dialog = FACT_INVOEREN()
        self.dialog.show()

    def fact_delete(self):
        sql_fact_id = "select Factuur_ID from facturen"
        df_fact_id = pd.read_sql(sql_fact_id, GUI.cnxn)
        l_fact_id = []
        for i in df_fact_id['Factuur_ID']:
            l_fact_id.append(str(i))
            
        item, ok = qw.QInputDialog.getItem(self, "Facturen", "Factuur_ID: ", l_fact_id , 0, False)
        if ok:
            return self.remove_fact(item)

    def remove_fact(self,item):
        cursor = GUI.cnxn.cursor()
        sql_ver_fact = "delete from Facturen where Factuur_ID =" + str(item)
        cursor.execute(str(sql_ver_fact))
        cursor.commit()

        
        
    #inv
    def inv_overzicht(self):
        sql_inv_overzicht = "select * from overzicht_investeringen order by periode desc"
        df_inv_overzicht = pd.read_sql(sql_inv_overzicht, GUI.cnxn)
        self.create_table(df_inv_overzicht)

    def inv_invoer(self):
        self.dialog = INV_INVOEREN()
        self.dialog.show()

    def inv_doorrekenen(self):
        self.dialog = INV_DOORREKENEN()
        self.dialog.show()

    def inv_delete(self):
        sql_inv_id = "select Investering_ID from Investering"
        df_inv_id = pd.read_sql(sql_inv_id, GUI.cnxn)
        l_inv_id = []
        for i in df_inv_id['Investering_ID']:
            l_inv_id.append(str(i))
            
        item, ok = qw.QInputDialog.getItem(self, "Investeringen", "Investering_ID: ", l_inv_id , 0, False)
        if ok:
            return self.remove_inv(item)

    def remove_inv(self,item):
        cursor = GUI.cnxn.cursor()
        sql_ver_inv = "delete from Investering where Investering_ID =" + str(item)
        cursor.execute(str(sql_ver_inv))
        cursor.commit()
    
    #int_kosten
    def int_kosten_overzicht(self):
        sql_int_kosten = "select * from overzicht_interne_kosten order by periode desc"
        df_int_kosten = pd.read_sql(sql_int_kosten, GUI.cnxn)
        self.create_table(df_int_kosten)       

    def int_kosten_invoer(self):
        self.dialog = INTERNE_KOSTEN_INVOEREN()
        self.dialog.show()

    def int_kosten_delete(self):
        sql_int_id = "select Interne_Kosten_ID from Interne_Kosten"
        df_int_id = pd.read_sql(sql_int_id, GUI.cnxn)
        l_int_id = []
        for i in df_int_id['Interne_Kosten_ID']:
            l_int_id.append(str(i))
            
        item, ok = qw.QInputDialog.getItem(self, "Interne Kosten", "Interne_Kosten_ID: ", l_int_id , 0, False)
        if ok:
            return self.remove_int(item)

    def remove_int(self,item):
        cursor = GUI.cnxn.cursor()
        sql_ver_int = "delete from Interne_Kosten where Interne_Kosten_ID =" + str(item)
        cursor.execute(str(sql_ver_int))
        cursor.commit()

    def int_kosten_doorrekenen(self):
        self.dialog = INT_DOORREKENEN()
        self.dialog.show()

    #ext_kosten
    def ext_kosten_overzicht(self):
        sql_ext_kosten = "select * from overzicht_externe_kosten order by periode desc"
        df_ext_kosten = pd.read_sql(sql_ext_kosten, GUI.cnxn)
        self.create_table(df_ext_kosten)   

    def ext_kosten_invoer(self):
        self.dialog = EXTERNE_KOSTEN_INVOEREN()
        self.dialog.show()

    def ext_kosten_delete(self):
        sql_ext_id = "select Externe_Kosten_ID from Externe_Kosten"
        df_ext_id = pd.read_sql(sql_ext_id, GUI.cnxn)
        l_ext_id = []
        for i in df_ext_id['Externe_Kosten_ID']:
            l_ext_id.append(str(i))
            
        item, ok = qw.QInputDialog.getItem(self, "Externe Kosten", "Externe_Kosten_ID: ", l_ext_id , 0, False)
        if ok:
            return self.remove_ext(item)

    def remove_ext(self,item):
        cursor = GUI.cnxn.cursor()
        sql_ver_ext = "delete from Externe_Kosten where Externe_Kosten_ID =" + str(item)
        cursor.execute(str(sql_ver_ext))
        cursor.commit()

    #staanpl
    def staanpl_overzicht(self):
        sql_staanpl = "select * from overzicht_staanplaats order by staanplaats_ID"
        df_staanpl = pd.read_sql(sql_staanpl, GUI.cnxn)
        self.create_table(df_staanpl)

    def staanpl_update(self):
        self.dialog = STAANPL()
        self.dialog.show()

    #stroom
    def stroomkosten_overzicht(self):
        sql_strkosten = "select * from overzicht_stroomkosten order by periode"
        df_strkosten = pd.read_sql(sql_strkosten, GUI.cnxn)
        self.create_table(df_strkosten)

    def stroomverbruik_overzicht(self):
        sql_strverbruik = "select * from overzicht_stroomverbruik order by periode"
        df_strverbruik = pd.read_sql(sql_strverbruik, GUI.cnxn)
        self.create_table(df_strverbruik)
    
    def stroomperkwh_overzicht(self):
        sql_perkwh = "select * from overzicht_perkwh order by periode"
        df_perkwh = pd.read_sql(sql_perkwh, GUI.cnxn)
        self.create_table(df_perkwh)

    def verlichting_overzicht(self):
        sql_vo = "select * from overzicht_terreinverlichting"
        df_vo = pd.read_sql(sql_vo, GUI.cnxn)
        self.create_table(df_vo)

    def stroom_doorrekenen(self):
        cursor = GUI.cnxn.cursor()
        cursor.execute("{CALL rihend_doorrekenen_stroomkosten}")
        cursor.commit()

        cursor.execute("{CALL doorrekenen_stroomkosten_terreinverlichting}")
        cursor.commit()

    def stroom_invoeren_tot(self):
        sql_tot = "select distinct   Stroomverbruik_niveau_Oms as Omschrijving\
                                    ,'0' as [Periode Begin]\
                                    ,'0' as [Periode Eind]\
                          from Stroomverbruik_totaal as svt\
                          inner join Stroomverbruik_Niveau as sn on sn.Stroomverbruik_niveau_ID = svt.stroomverbruik_niveau_id"
        df_tot = pd.read_sql(sql_tot, GUI.cnxn)
        
        self.dialog = STR_INVOEREN(df_tot, 'Totaal')
        self.dialog.show()

    def stroom_invoeren_ver(self):
        sql_ver = "select distinct   Stroomverbruik_niveau_Oms as Omschrijving\
                                    ,'0' as [Periode Begin]\
                                    ,'0' as [Periode Eind]\
                          from Stroomverbruik_verdeeld as svv\
                          inner join Stroomverbruik_Niveau as sn on sn.Stroomverbruik_niveau_ID = svv.stroomverbruik_niveau_id"
        df_ver = pd.read_sql(sql_ver,GUI.cnxn)
        
        self.dialog = STR_INVOEREN(df_ver, 'Verdeeld')
        self.dialog.show()

    def stroom_invoeren_kost(self):
        sql_kost = "select distinct  Kosten_Type_Omschrijving as Omschrijving\
				    ,'0' as Aantal\
				    ,'0' as bedrag\
		           from stroomverbruik_kosten as sk\
		           inner join Stroomverbruik_Kosten_Type as skt on skt.Kosten_Type_ID = sk.Kosten_Type_ID"
        df_kost = pd.read_sql(sql_kost,GUI.cnxn)
        
        self.dialog = STR_INVOEREN(df_kost, 'Kosten')
        self.dialog.show()

    def verlichting_invoeren(self):
        pass
    
    #periode
    def periode_overzicht(self):
        sql_periode = "select * from periode"
        df_periode = pd.read_sql(sql_periode, GUI.cnxn)
        self.create_table(df_periode)
        
    def periode_update(self):
        self.dialog = PERIODE()
        self.dialog.show()

    # creating table from dataframe
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)

    # tabel doorklikken naar subniveau
    def cell_was_clicked(self, row, column):
        if str(self.table.horizontalHeaderItem(0).text()) == 'Specificatie':
            if column == 0:
                hn = self.table.item(row,column).text()
                periode =  self.table.item(row, column + 1).text()
                sql_subniveau = "select * \
                                        from overzicht_subniveau \
                                        where Specificatie_Hoofdniveau = '" + str(hn) + "'\
                                        and Jaar = '" + str(periode) + "'"
                df_subniveau = pd.read_sql(sql_subniveau, GUI.cnxn)
                self.create_table(df_subniveau)
        if str(self.table.horizontalHeaderItem(1).text()) == 'Specificatie_Subniveau':
            if column == 1:
                sn = self.table.item(row,column).text()
                periode = self.table.item(row, column + 1).text()
                sql_kc = "select * \
                                 from overzicht_kosten_categorie \
                                 where Specificatie_Subniveau = '" + str(sn) + "'\
                                 and Jaar = '" + str(periode) + "'"
                df_kc = pd.read_sql(sql_kc, GUI.cnxn)
                self.create_table(df_kc)
        if str(self.table.horizontalHeaderItem(2).text()) == 'Specificatie_Kosten_Categorie':
            if column == 2:
                kc = self.table.item(row,column).text()
                periode = self.table.item(row, column + 1).text()
                sql_kcs = "select * \
                                    from overzicht_specificatie_Kosten_Categorie \
                                    where [Specificatie Kosten Categorie] = '" + str(kc) + "'\
                                    and [Periode] = '" + str(periode) + "'"
                df_kcs = pd.read_sql(sql_kcs, GUI.cnxn)
                self.create_table(df_kcs)

# Staanplaatsen class
class STAANPL(qw.QWidget):
    # cls var
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    list_ja_nee = ["Nee","Ja"]

    sql_periode = 'Select * from Periode'
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode2 = df_periode['Omschrijving']
    
    # start widget STAANPL
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)

        self.title = 'Aanpassen Staanplaats'
        self.top = 300
        self.left = 300
        self.width = 300
        self.height = 200
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)

        sql_staanpl_id = 'Select Staanplaats_ID from Staanplaatsen'
        df_staanpl_id = pd.read_sql(sql_staanpl_id, STAANPL.cnxn)
        df_staanpl_id = df_staanpl_id['Staanplaats_ID']

        #qbox met staanplaats_ID
        self.staanplaats_label = qw.QLabel(self)
        self.staanplaats_label.setText('Staanplaats_ID')
        l.addWidget(self.staanplaats_label ,0,0)
        
        self.staanplaats_box = qw.QComboBox(self)
        l.addWidget(self.staanplaats_box ,0,1)
        for i in range(len(df_staanpl_id)):
            self.staanplaats_box.addItem(str(df_staanpl_id[i])) 
            
        #qbox met gerealiseerd
        self.gerealiseerd_label = qw.QLabel(self)
        self.gerealiseerd_label.setText('Gerealiseerd')
        l.addWidget(self.gerealiseerd_label ,1,0)

        self.gerealiseerd_box = qw.QComboBox(self)
        l.addWidget(self.gerealiseerd_box ,1,1)
        for i in range(len(STAANPL.list_ja_nee)):
            self.gerealiseerd_box.addItem(STAANPL.list_ja_nee[i])

        self.periode_real_label = qw.QLabel(self)
        self.periode_real_label.setText('Periode')
        l.addWidget(self.periode_real_label ,1,2)

        self.periode_real_box = qw.QComboBox(self)
        l.addWidget(self.periode_real_box ,1,3)
        for i in range(len(STAANPL.df_periode2)):
            self.periode_real_box.addItem(STAANPL.df_periode2[i])

        #qbox met verkocht
        self.verkocht_label = qw.QLabel(self)
        self.verkocht_label.setText('Verkocht')
        l.addWidget(self.verkocht_label ,2,0)

        self.verkocht_box = qw.QComboBox(self)
        l.addWidget(self.verkocht_box ,2,1)
        for i in range(len(STAANPL.list_ja_nee)):
            self.verkocht_box.addItem(STAANPL.list_ja_nee[i])

        self.periode_verk_label = qw.QLabel(self)
        self.periode_verk_label.setText('Periode')
        l.addWidget(self.periode_verk_label ,2,2)

        self.periode_verk_box = qw.QComboBox(self)
        l.addWidget(self.periode_verk_box ,2,3)
        for i in range(len(STAANPL.df_periode2)):
            self.periode_verk_box.addItem(STAANPL.df_periode2[i])

        #button to update and close
        self.aanpassen_knop = qw.QPushButton('Update', self)
        l.addWidget(self.aanpassen_knop ,0,3)
        self.aanpassen_knop.clicked.connect(self.update_and_close)
        
        self.show()


    #update staanplaatsen en sluit venster
    def update_and_close(self):
        cursor = STAANPL.cnxn.cursor()

        Staanplaats_ID = self.staanplaats_box.currentText()
        
        Gerealiseerd = self.gerealiseerd_box.currentText()
        if Gerealiseerd == "Ja":
            Gerealiseerd = "1"
        else:
            Gerealiseerd = "0"
        Gerealiseerd_Periode = self.periode_real_box.currentText()
        Gerealiseerd_Periode = STAANPL.df_periode[STAANPL.df_periode['Omschrijving'] == str(Gerealiseerd_Periode)]['Periode_ID'].values
        Gerealiseerd_Periode = list(Gerealiseerd_Periode)
        
        Verkocht = self.verkocht_box.currentText()
        if Verkocht == "Ja":
            Verkocht = "1"
        else:
            Verkocht = "0"
        Verkocht_Periode = self.periode_verk_box.currentText()
        Verkocht_Periode = STAANPL.df_periode[STAANPL.df_periode['Omschrijving'] == str(Verkocht_Periode)]['Periode_ID'].values
        Verkocht_Periode = list(Verkocht_Periode)
        
        params = (Staanplaats_ID,Gerealiseerd,str(Gerealiseerd_Periode[0]),Verkocht,str(Verkocht_Periode[0]))
        cursor.execute("{CALL update_staanplaatsen (?,?,?,?,?)}",params)
        cursor.commit()
        self.close()


#Periode class
class PERIODE(qw.QWidget):
    # cls var
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_periode = "select Omschrijving from periode"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']
    
    # start widget PERIODE
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)

        self.title = 'Aanpassen Periode'
        self.top = 300
        self.left = 300
        self.width = 300
        self.height = 200
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)

        #qbox met periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,1,0)

        self.periode_box = qw.QComboBox(self)
        l.addWidget(self.periode_box ,1,1)
        for i in range(len(PERIODE.df_periode)):
            self.periode_box.addItem(PERIODE.df_periode[i])

        #input cpi
        self.cpi_label = qw.QLabel(self)
        self.cpi_label.setText('CPI')
        l.addWidget(self.cpi_label ,2,0)

        self.cpi_line = qw.QLineEdit(self)
        l.addWidget(self.cpi_line ,2,1)

        #input btw
        self.btw_label = qw.QLabel(self)
        self.btw_label.setText('BTW')
        l.addWidget(self.btw_label ,3,0)

        self.btw_line = qw.QLineEdit(self)
        l.addWidget(self.btw_line ,3,1)

        #button to update and close
        self.aanpassen_knop = qw.QPushButton('Update', self)
        l.addWidget(self.aanpassen_knop ,4,0)
        self.aanpassen_knop.clicked.connect(self.update_and_close)

        self.show()

        # call stored procedure aanpassen_periode and close
    def update_and_close(self):
        cursor = STAANPL.cnxn.cursor()

        cpi = self.cpi_line.text()
        cpi = cpi.replace(',' , '.')
        btw = self.btw_line.text()
        btw = btw.replace(',' , '.')
        periode = self.periode_box.currentText()

        params = (str(periode),str(cpi),str(btw))
        cursor.execute("{CALL aanpassen_periode (?,?,?)}",params)
        cursor.commit()

        self.close()

# STR_INVOEREN class
class STR_INVOEREN(qw.QWidget):
    # cls var
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_periode = "select Omschrijving from periode as pr where pr.Periode_ID >= 4"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode2 = df_periode['Omschrijving']

    # start widget STR_INVOEREN
    def __init__(self, df_main, type_omschrijving):
        super().__init__()

        l = qw.QGridLayout(self)

        self.title = 'Invoeren Stroom'
        self.top = 300
        self.left = 300
        self.width = 300
        self.height = 200
        
        self.setWindowTitle(self.title)
        self.setGeometry(self.top,self.left,self.width,self.height)

        self.type_omschrijving = type_omschrijving

        # q_box met periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,0,0)

        self.periode_box = qw.QComboBox(self)
        l.addWidget(self.periode_box ,0,1)
        for i in range(len(STR_INVOEREN.df_periode2)):
            self.periode_box.addItem(STR_INVOEREN.df_periode2[i])        

        # Tabel met totaal verbruik
        self.tot_verbruik_label = qw.QLabel(self)
        self.tot_verbruik_label.setText('Invoer')
        l.addWidget(self.tot_verbruik_label ,1,0)

        self.update_button = qw.QPushButton('Update', self)
        l.addWidget(self.update_button ,1,1)
        self.update_button.clicked.connect(self.update_stroom)

        self.table = qw.QTableWidget(self)
        self.table.setRowCount(2)
        self.table.setColumnCount(3)
        self.table.setFixedHeight(150)
        self.table.setFixedWidth(307.5)
        l.addWidget(self.table ,2,0)
        self.create_table(df_main)

        self.show()

    #updaten stroom
    def update_stroom(self, type_omschrijving):
        cursor = STR_INVOEREN.cnxn.cursor()
        periode = str(self.periode_box.currentText())

        if self.type_omschrijving == 'Kosten':
            for j in range(self.table.rowCount()):
                omschrijving = str(self.table.item(j,0).text())
                aantal       = str(self.table.item(j,1).text())
                aantal       = aantal.replace(',' , '.')
                bedrag       = str(self.table.item(j,2).text())
                bedrag       = bedrag.replace(',' , '.')

                params = (str(periode), str(omschrijving), str(aantal), str(bedrag))
                cursor.execute("{CALL invoeren_stroomkosten (?,?,?,?)}",params)
                cursor.commit()

        if self.type_omschrijving == 'Verdeeld':
            for j in range(self.table.rowCount()):
                omschrijving = str(self.table.item(j,0).text())
                Periode_Begin       = str(self.table.item(j,1).text())
                Periode_Begin       = Periode_Begin.replace(',' , '.')
                Periode_Eind        = str(self.table.item(j,2).text())
                Periode_Eind        = Periode_Eind.replace(',' , '.')

                params = (str(omschrijving), str(periode), str(Periode_Begin), str(Periode_Eind))
                cursor.execute("{CALL invoeren_stroomverbruik_verdeeld (?,?,?,?)}",params)
                cursor.commit()

        if self.type_omschrijving == 'Totaal':
            for j in range(self.table.rowCount()):
                omschrijving = str(self.table.item(j,0).text())
                Periode_Begin       = str(self.table.item(j,1).text())
                Periode_Begin       = Periode_Begin.replace(',' , '.')
                Periode_Eind        = str(self.table.item(j,2).text())
                Periode_Eind        = Periode_Eind.replace(',' , '.')

                params = (str(omschrijving), str(periode), str(Periode_Begin), str(Periode_Eind))
                cursor.execute("{CALL invoeren_stroomverbruik_totaal (?,?,?,?)}",params)
                cursor.commit()    
            
        self.close()
        
    # creating table from dataframe
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)

# FACT_INVOEREN Class
class FACT_INVOEREN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_hoofd = "select Omschrijving from Hoofdniveau_Omschrijving"
    df_hoofd = pd.read_sql(sql_hoofd, cnxn)
    df_hoofd = df_hoofd['Omschrijving']

    sql_periode = "select Omschrijving from Periode where Periode_ID > 6"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']

    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Facturen Invoeren'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #table
        self.table = qw.QTableWidget(self)
        self.table.setRowCount(20)
        self.table.setColumnCount(5)
        self.table.setFixedHeight(150)
        self.table.setFixedWidth(512.5)
        l.addWidget(self.table ,1,2,3,1)
        
        #combobox hoofdniveau
        self.hoofd_label = qw.QLabel(self)
        self.hoofd_label.setText('Hoofdniveau')
        l.addWidget(self.hoofd_label ,1,0)
        
        self.hoofd_box = qw.QComboBox(self)
        for i in range(len(FACT_INVOEREN.df_hoofd)):
            self.hoofd_box.addItem(FACT_INVOEREN.df_hoofd[i])
        self.hoofd_box.activated[str].connect(self.sub_box_fill)
        l.addWidget(self.hoofd_box ,1,1)
        
        #combobox subniveau
        self.sub_label = qw.QLabel(self)
        self.sub_label.setText('Subniveau')
        l.addWidget(self.sub_label ,3,0)
        
        self.sub_box = qw.QComboBox(self)
        self.sub_box.resize(300,30)
        l.addWidget(self.sub_box ,3,1)
        self.sub_box.activated[str].connect(self.create_df_main)

        #combobox periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,2,0)
        
        self.periode_box = qw.QComboBox(self)
        l.addWidget(self.periode_box ,2,1)
        for i in range(len(FACT_INVOEREN.df_periode)):
            self.periode_box.addItem(FACT_INVOEREN.df_periode[i])

        #button invoeren
        self.insert_button = qw.QPushButton('Invoeren', self)
        l.addWidget(self.insert_button ,0,0)
        self.insert_button.clicked.connect(self.invoeren_facturen)

        #button rij-verwijderen
        self.remove_button = qw.QPushButton('Rij verwijderen', self)
        l.addWidget(self.remove_button ,0,2)
        self.remove_button.clicked.connect(self.remove_row)


        self.show()

    #subniveau selectie
    def sub_box_fill(self, hn):
        self.sub_box.clear()
        #hn = hn.replace("'", "")
        sql_sub_box = "select sn.Omschrijving as Omschrijving \
                           from Subniveau sn \
                           inner join Hoofdniveau_Omschrijving hn on hn.Hoofdniveau_ID = sn.Ouder_hoofdniveau \
		           where hn.Omschrijving = '" + str(hn) + "'"
        df_sub_box = pd.read_sql(sql_sub_box, FACT_INVOEREN.cnxn)
        df_sub_box = df_sub_box['Omschrijving']
        for i in range(len(df_sub_box)):
            self.sub_box.addItem(df_sub_box[i])
            
    #df_main generen
    def create_df_main(self, sn):
        periode = self.periode_box.currentText()

        sn = sn.replace("'", "")

        sql_main = "select    kc.Categorie_Omschrijving as [Categorie omschrijving]\
                             ,'"+ str(periode) + "'  as [Periode]\
                             ,1.0 as [Meenemen]\
                             ,0 as [Extern Factuur Nummer]\
                             ,0 as [Factuur Datum]\
                             ,0   as [Bedrag]\
                         from Facturen as fc\
                         inner join Kosten_Categorie kc on fc.Categorie_ID = kc.Categorie_ID\
                         inner join Subniveau sn on sn.Subniveau_ID = kc.Niveau\
                         inner join Periode pr on pr.Periode_ID = fc.Periode_ID\
                         where sn.Omschrijving = '" + str(sn) + "'"
        df_main = pd.read_sql(sql_main, FACT_INVOEREN.cnxn)
        self.create_table(df_main)

    # functie invoeren facturen
    def invoeren_facturen(self):
        cursor = FACT_INVOEREN.cnxn.cursor()
        
        for i in range(self.table.rowCount()):
            kosten_cat = self.table.item(i,0).text()
            periode = self.table.item(i,1).text()
            meenemen = self.table.item(i,2).text()
            meenemen = meenemen.replace(',', '.')
            fact_nr = self.table.item(i,3).text()
            fact_nr = fact_nr.replace(',', '.')
            fact_dat = self.table.item(i,4).text()
            fact_bedr = self.table.item(i,5).text()
            fact_bedr = fact_bedr.replace(',', '.')

            params = (str(kosten_cat), str(periode), str(meenemen), str(fact_nr), str(fact_dat), str(fact_bedr))
            cursor.execute("{CALL invoeren_facturen (?,?,?,?,?,?)}",params)
            cursor.commit()
            
        self.close()
        

    #functie verwijderen rij
    def remove_row(self):
        self.table.removeRow(self.table.currentRow())

    # creating table from dataframe
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)

class INV_DOORREKENEN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")

    sql_periode = "Select Omschrijving from Periode"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']
    
    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Investeringen Doorrekenen'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #Combobox investering
        self.inv_label = qw.QLabel(self)
        self.inv_label.setText('Investering')
        l.addWidget(self.inv_label ,1,0)
        
        sql_inv = "Select Investering_Omschrijving from Investering"
        df_inv = pd.read_sql(sql_inv, INV_DOORREKENEN.cnxn)
        df_inv = df_inv['Investering_Omschrijving']
        
        self.inv_box = qw.QComboBox(self)
        for i in range(len(df_inv)):
            self.inv_box.addItem(df_inv[i])
        l.addWidget(self.inv_box ,1,1)
        
        #Combobox periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,2,0)
        
        self.periode_box = qw.QComboBox(self)
        for i in range(len(INV_DOORREKENEN.df_periode)):
            self.periode_box.addItem(INV_DOORREKENEN.df_periode[i])
        l.addWidget(self.periode_box ,2,1)

        #Pushbutton Doorrekenen
        self.doorreken_button = qw.QPushButton('Doorrekenen', self)
        l.addWidget(self.doorreken_button ,0,0)
        self.doorreken_button.clicked.connect(self.doorrekenen)

        self.show()

    def doorrekenen(self):
        cursor = INV_DOORREKENEN.cnxn.cursor()
        
        periode = str(self.periode_box.currentText())
        investering = str(self.inv_box.currentText())

        params = (str(periode), str(investering))
        cursor.execute("{CALL doorrekenen_investering (?,?)}",params)
        cursor.commit()

        self.close()

class INV_INVOEREN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_periode = "Select Omschrijving from Periode"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']

    sql_hoofd = "select Omschrijving from Hoofdniveau_Omschrijving"
    df_hoofd = pd.read_sql(sql_hoofd, cnxn)
    df_hoofd = df_hoofd['Omschrijving']
    
    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Investeringen Invoeren'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #Pushbutton Invoeren
        self.invoeren_button = qw.QPushButton('Invoeren', self)
        l.addWidget(self.invoeren_button ,0,0)
        self.invoeren_button.clicked.connect(self.invoeren)

        #combobox periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,1,0)

        self.periode_box = qw.QComboBox(self)
        for i in range(len(INV_INVOEREN.df_periode)):
            self.periode_box.addItem(INV_INVOEREN.df_periode[i])
        l.addWidget(self.periode_box ,1,1)

        #Drop down hoofdniveau
        self.hoofd_label = qw.QLabel(self)
        self.hoofd_label.setText('Hoofdniveau')
        l.addWidget(self.hoofd_label ,2,0)

        self.hoofd_box = qw.QComboBox(self)
        for i in range(len(INV_INVOEREN.df_hoofd)):
            self.hoofd_box.addItem(INV_INVOEREN.df_hoofd[i])
        l.addWidget(self.hoofd_box ,2,1)
        self.hoofd_box.activated[str].connect(self.sub_box_fill)

        #combobox subniveau
        self.sub_label = qw.QLabel(self)
        self.sub_label.setText('Subniveau')
        l.addWidget(self.sub_label ,3,0)

        self.sub_box = qw.QComboBox(self)
        l.addWidget(self.sub_box ,3,1)
        self.sub_box.activated[str].connect(self.kc_box_fill)

        #combobox kosten Categorie
        self.kc_label = qw.QLabel(self)
        self.kc_label.setText('Kosten Categorie')
        l.addWidget(self.kc_label ,4,0)

        self.kc_box = qw.QComboBox(self)
        l.addWidget(self.kc_box ,4,1)

        #Invoeren totaal bedrag
        self.bd_label = qw.QLabel(self)
        self.bd_label.setText('Totaal bedrag')
        l.addWidget(self.bd_label ,1,2)

        self.bd_line = qw.QLineEdit(self)
        l.addWidget(self.bd_line ,1,3)

        #Invoeren percentage meenemen
        self.pm_label = qw.QLabel(self)
        self.pm_label.setText('Percentage meenemen')
        l.addWidget(self.pm_label ,2,2)

        self.pm_line = qw.QLineEdit(self)
        self.pm_line.setText('1.0')
        l.addWidget(self.pm_line ,2,3)

        #Invoeren rente percentage
        self.rp_label = qw.QLabel(self)
        self.rp_label.setText('Rente Percentage')
        l.addWidget(self.rp_label ,3,2)

        self.rp_line = qw.QLineEdit(self)
        self.rp_line.setText('0.07')
        l.addWidget(self.rp_line ,3,3)

        #Invoeren afscrhijving percentage
        self.ap_label = qw.QLabel(self)
        self.ap_label.setText('Afschrijvingsperiode')
        l.addWidget(self.ap_label ,4,2)

        self.ap_line = qw.QLineEdit(self)
        l.addWidget(self.ap_line ,4,3)

        #Omschrijving invoeren
        self.oms_label = qw.QLabel(self)
        self.oms_label.setText('Investering Omschrijving')
        l.addWidget(self.oms_label ,5,2)

        self.oms_line = qw.QLineEdit(self)
        l.addWidget(self.oms_line ,5,3)

        self.show()

    #Vullen sub_Box
    def sub_box_fill(self, hn):
        self.sub_box.clear()
        sql_sub_box = "select sn.Omschrijving as Omschrijving \
                           from Subniveau sn \
                           inner join Hoofdniveau_Omschrijving hn on hn.Hoofdniveau_ID = sn.Ouder_hoofdniveau \
		           where hn.Omschrijving = '" + str(hn) + "'"
        df_sub_box = pd.read_sql(sql_sub_box, INV_INVOEREN.cnxn)
        df_sub_box = df_sub_box['Omschrijving']
        for i in range(len(df_sub_box)):
            self.sub_box.addItem(df_sub_box[i])

    #Vullen kc_box
    def kc_box_fill(self, sn):
        self.kc_box.clear
        sql_kc_box = "select Categorie_Omschrijving\
                             from Kosten_Categorie as kc\
                             inner join Subniveau as sn on sn.Subniveau_ID = kc.Niveau\
                             where sn.Omschrijving = '" + str(sn) + "'"
        df_kc_box = pd.read_sql(sql_kc_box, INV_INVOEREN.cnxn)
        df_kc_box = df_kc_box['Categorie_Omschrijving']
        for i in range(len(df_kc_box)):
            self.kc_box.addItem(df_kc_box[i])

    #Invoeren Investering
    def invoeren(self):
        cursor = GUI.cnxn.cursor()
        
        omschrijving = self.oms_line.text()
        categorie = self.kc_box.currentText()
        periode = self.periode_box.currentText()
        inv_afschrijving = self.ap_line.text()
        inv_afschrijving = inv_afschrijving.replace(',', '.')
        rente = self.rp_line.text()
        rente = rente.replace(',', '.')
        bedrag = self.bd_line.text()
        bedrag = bedrag.replace(',', '.')
        per_meenemen = self.pm_line.text()
        per_meenemen = per_meenemen.replace(',' , '.')

        params = (str(omschrijving), str(categorie), str(periode), str(inv_afschrijving), str(rente), str(bedrag), str(per_meenemen))
        cursor.execute("{CALL invoeren_investering (?,?,?,?,?,?,?)}",params)
        cursor.commit()

        self.close()


class INT_DOORREKENEN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_periode = "Select Omschrijving from Periode"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']
    
    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Interne Kosten Doorrekenen'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #push button voor doorekenen interne kosten
        self.dr_button = qw.QPushButton('Doorrekenen', self)
        l.addWidget(self.dr_button ,0,0)
        self.dr_button.clicked.connect(self.int_doorrekenen)

        #combobox met periode
        self.pr_label = qw.QLabel(self)
        self.pr_label.setText('Periode')
        l.addWidget(self.pr_label ,1,0)

        self.pr_box = qw.QComboBox(self)
        for i in range(len(INT_DOORREKENEN.df_periode)):
            self.pr_box.addItem(INT_DOORREKENEN.df_periode[i])
        l.addWidget(self.pr_box ,1,1)

        #combobox met interne kosten
        self.ik_label = qw.QLabel(self)
        self.ik_label.setText('Interne Kosten')
        l.addWidget(self.ik_label ,2,0)

        sql_ik = 'select Interne_kosten_ID from Interne_Kosten where Investering_ID is null'
        df_ik = pd.read_sql(sql_ik, INT_DOORREKENEN.cnxn)
        df_ik = df_ik['Interne_kosten_ID']
        
        self.ik_box = qw.QComboBox(self)
        for i in range(len(df_ik)):
            self.ik_box.addItem(str(df_ik[i]))
        l.addWidget(self.ik_box ,2,1)

        self.show()

    #interne kosten doorrekenen
    def int_doorrekenen(self):
        cursor = GUI.cnxn.cursor()

        periode = self.pr_box.currentText()
        int_kosten_id = self.ik_box.currentText()
        
        params = (str(int_kosten_id), str(periode))
        cursor.execute("{CALL doorrekenen_interne_kosten (?,?)}",params)
        self.close


# Externe kosten invoeren Class
class EXTERNE_KOSTEN_INVOEREN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_hoofd = "select Omschrijving from Hoofdniveau_Omschrijving"
    df_hoofd = pd.read_sql(sql_hoofd, cnxn)
    df_hoofd = df_hoofd['Omschrijving']

    sql_periode = "select Omschrijving from Periode where Periode_ID > 6"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']

    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Externe kosten invoeren'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #table
        self.table = qw.QTableWidget(self)
        self.table.setRowCount(20)
        self.table.setColumnCount(5)
        self.table.setFixedHeight(150)
        self.table.setFixedWidth(512.5)
        l.addWidget(self.table ,1,2,3,1)
        
        #combobox hoofdniveau
        self.hoofd_label = qw.QLabel(self)
        self.hoofd_label.setText('Hoofdniveau')
        l.addWidget(self.hoofd_label ,1,0)
        
        self.hoofd_box = qw.QComboBox(self)
        for i in range(len(EXTERNE_KOSTEN_INVOEREN.df_hoofd)):
            self.hoofd_box.addItem(EXTERNE_KOSTEN_INVOEREN.df_hoofd[i])
        self.hoofd_box.activated[str].connect(self.sub_box_fill)
        l.addWidget(self.hoofd_box ,1,1)
        
        #combobox subniveau
        self.sub_label = qw.QLabel(self)
        self.sub_label.setText('Subniveau')
        l.addWidget(self.sub_label ,3,0)
        
        self.sub_box = qw.QComboBox(self)
        self.sub_box.resize(300,30)
        l.addWidget(self.sub_box ,3,1)
        self.sub_box.activated[str].connect(self.create_df_main)

        #combobox periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,2,0)
        
        self.periode_box = qw.QComboBox(self)
        l.addWidget(self.periode_box ,2,1)
        for i in range(len(EXTERNE_KOSTEN_INVOEREN.df_periode)):
            self.periode_box.addItem(EXTERNE_KOSTEN_INVOEREN.df_periode[i])

        #button invoeren
        self.insert_button = qw.QPushButton('Invoeren', self)
        l.addWidget(self.insert_button ,0,0)
        self.insert_button.clicked.connect(self.invoeren_externe_kosten)

        #button rij-verwijderen
        self.remove_button = qw.QPushButton('Rij verwijderen', self)
        l.addWidget(self.remove_button ,0,2)
        self.remove_button.clicked.connect(self.remove_row)


        self.show()

    #subniveau selectie
    def sub_box_fill(self, hn):
        self.sub_box.clear()
        #hn = hn.replace("'", "")
        sql_sub_box = "select sn.Omschrijving as Omschrijving \
                           from Subniveau sn \
                           inner join Hoofdniveau_Omschrijving hn on hn.Hoofdniveau_ID = sn.Ouder_hoofdniveau \
		           where hn.Omschrijving = '" + str(hn) + "'"
        df_sub_box = pd.read_sql(sql_sub_box, EXTERNE_KOSTEN_INVOEREN.cnxn)
        df_sub_box = df_sub_box['Omschrijving']
        for i in range(len(df_sub_box)):
            self.sub_box.addItem(df_sub_box[i])
            
    #df_main generen
    def create_df_main(self, sn):
        periode = self.periode_box.currentText()

        sn = sn.replace("'", "")

        sql_main = "select    kc.Categorie_Omschrijving as [Categorie omschrijving]\
                             ,'"+ str(periode) + "'  as [Periode]\
                             ,1.0 as [Meenemen]\
                             ,0 as [Aantal]\
                             ,'"+ str(periode) + "-01-01' as [Datum Gemaakt]\
                             ,0   as [Bedrag]\
                         from externe_kosten as ek\
                         inner join Kosten_Categorie kc on ek.Categorie_ID = kc.Categorie_ID\
                         inner join Subniveau sn on sn.Subniveau_ID = kc.Niveau\
                         inner join Periode pr on pr.Periode_ID = ek.Periode_ID\
                         where sn.Omschrijving = '" + str(sn) + "'\
                         and   ek.Investering_ID is null"
        df_main = pd.read_sql(sql_main, EXTERNE_KOSTEN_INVOEREN.cnxn)
        self.create_table(df_main)

    # functie invoeren facturen
    def invoeren_externe_kosten(self):
        cursor = INTERNE_KOSTEN_INVOEREN.cnxn.cursor()

        for i in range(self.table.rowCount()):
            kosten_cat = self.table.item(i,0).text()
            periode = self.table.item(i,1).text()
            meenemen = self.table.item(i,2).text()
            meenemen = meenemen.replace(',', '.')
            aantal = self.table.item(i,3).text()
            aantal = aantal.replace(',', '.')
            fact_dat = self.table.item(i,4).text()
            bedrag = self.table.item(i,5).text()
            bedrag = bedrag.replace(',', '.')

            params = (str(kosten_cat), str(periode), str(fact_dat), str(meenemen), str(aantal), str(bedrag))
            cursor.execute("{CALL invoeren_externe_kosten (?,?,?,?,?,?)}",params)
            cursor.commit()
            
        self.close()

    #functie verwijderen rij
    def remove_row(self):
        self.table.removeRow(self.table.currentRow())

    # creating table from dataframe
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)

# Interne Kosten Class
class INTERNE_KOSTEN_INVOEREN(qw.QWidget):
    # Add cls Variables here
    cnxn = odbc.connect("Driver={SQL Server Native Client 11.0};"
                        "Server=DESKTOP-D3UL9SD;"
                        "Database=Rihend;"
                        "Trusted_Connection=yes;")
    
    sql_hoofd = "select Omschrijving from Hoofdniveau_Omschrijving"
    df_hoofd = pd.read_sql(sql_hoofd, cnxn)
    df_hoofd = df_hoofd['Omschrijving']

    sql_periode = "select Omschrijving from Periode where Periode_ID > 6"
    df_periode = pd.read_sql(sql_periode, cnxn)
    df_periode = df_periode['Omschrijving']

    # Open main window
    def __init__(self):
        super().__init__()

        l = qw.QGridLayout(self)
        
        self.title = 'Interne kosten invoeren'
        self.top = 30
        self.left = 0
        self.width = 600
        self.height = 300
        self.setWindowTitle(self.title)
        self.setGeometry(self.left,self.top,self.width,self.height)

        #table
        self.table = qw.QTableWidget(self)
        self.table.setRowCount(20)
        self.table.setColumnCount(5)
        self.table.setFixedHeight(150)
        self.table.setFixedWidth(512.5)
        l.addWidget(self.table ,1,2,3,1)
        
        #combobox hoofdniveau
        self.hoofd_label = qw.QLabel(self)
        self.hoofd_label.setText('Hoofdniveau')
        l.addWidget(self.hoofd_label ,1,0)
        
        self.hoofd_box = qw.QComboBox(self)
        for i in range(len(INTERNE_KOSTEN_INVOEREN.df_hoofd)):
            self.hoofd_box.addItem(INTERNE_KOSTEN_INVOEREN.df_hoofd[i])
        self.hoofd_box.activated[str].connect(self.sub_box_fill)
        l.addWidget(self.hoofd_box ,1,1)
        
        #combobox subniveau
        self.sub_label = qw.QLabel(self)
        self.sub_label.setText('Subniveau')
        l.addWidget(self.sub_label ,3,0)
        
        self.sub_box = qw.QComboBox(self)
        self.sub_box.resize(300,30)
        l.addWidget(self.sub_box ,3,1)
        self.sub_box.activated[str].connect(self.create_df_main)

        #combobox periode
        self.periode_label = qw.QLabel(self)
        self.periode_label.setText('Periode')
        l.addWidget(self.periode_label ,2,0)
        
        self.periode_box = qw.QComboBox(self)
        l.addWidget(self.periode_box ,2,1)
        for i in range(len(INTERNE_KOSTEN_INVOEREN.df_periode)):
            self.periode_box.addItem(INTERNE_KOSTEN_INVOEREN.df_periode[i])

        #button invoeren
        self.insert_button = qw.QPushButton('Invoeren', self)
        l.addWidget(self.insert_button ,0,0)
        self.insert_button.clicked.connect(self.invoeren_interne_kosten)

        #button rij-verwijderen
        self.remove_button = qw.QPushButton('Rij verwijderen', self)
        l.addWidget(self.remove_button ,0,2)
        self.remove_button.clicked.connect(self.remove_row)


        self.show()

    #subniveau selectie
    def sub_box_fill(self, hn):
        self.sub_box.clear()
        #hn = hn.replace("'", "")
        sql_sub_box = "select sn.Omschrijving as Omschrijving \
                           from Subniveau sn \
                           inner join Hoofdniveau_Omschrijving hn on hn.Hoofdniveau_ID = sn.Ouder_hoofdniveau \
		           where hn.Omschrijving = '" + str(hn) + "'"
        df_sub_box = pd.read_sql(sql_sub_box, INTERNE_KOSTEN_INVOEREN.cnxn)
        df_sub_box = df_sub_box['Omschrijving']
        for i in range(len(df_sub_box)):
            self.sub_box.addItem(df_sub_box[i])
            
    #df_main generen
    def create_df_main(self, sn):
        periode = self.periode_box.currentText()

        sn = sn.replace("'", "")

        sql_main = "select    kc.Categorie_Omschrijving as [Categorie omschrijving]\
                             ,'"+ str(periode) + "'  as [Periode]\
                             ,1.0 as [Meenemen]\
                             ,0 as [Aantal]\
                             ,'"+ str(periode) + "-01-01' as [Datum Gemaakt]\
                             ,0   as [Bedrag]\
                         from interne_kosten as ik\
                         inner join Kosten_Categorie kc on ik.Categorie_ID = kc.Categorie_ID\
                         inner join Subniveau sn on sn.Subniveau_ID = kc.Niveau\
                         inner join Periode pr on pr.Periode_ID = ik.Periode_ID\
                         where sn.Omschrijving = '" + str(sn) + "'\
                         and   ik.Investering_ID is null"
        df_main = pd.read_sql(sql_main, INTERNE_KOSTEN_INVOEREN.cnxn)
        self.create_table(df_main)

    # functie invoeren facturen
    def invoeren_interne_kosten(self):
        cursor = INTERNE_KOSTEN_INVOEREN.cnxn.cursor()

        for i in range(self.table.rowCount()):
            kosten_cat = self.table.item(i,0).text()
            periode = self.table.item(i,1).text()
            meenemen = self.table.item(i,2).text()
            meenemen = meenemen.replace(',', '.')
            aantal = self.table.item(i,3).text()
            aantal = aantal.replace(',', '.')
            fact_dat = self.table.item(i,4).text()
            bedrag = self.table.item(i,5).text()
            bedrag = bedrag.replace(',', '.')

            params = (str(kosten_cat), str(periode), str(fact_dat), str(meenemen), str(aantal), str(bedrag))
            cursor.execute("{CALL invoeren_interne_kosten (?,?,?,?,?,?)}",params)
            cursor.commit()
            
        self.close()

    #functie verwijderen rij
    def remove_row(self):
        self.table.removeRow(self.table.currentRow())

    # creating table from dataframe
    def create_table(self, df_main):
        column_header = list(df_main.columns)
        column = 0
        self.table.setColumnCount(df_main.shape[1]) 
        self.table.setRowCount(df_main.shape[0])
        
        for i in column_header:
            row = 0
            for j in df_main[i]:
                if str(j) != 'nan':
                    newitem = qw.QTableWidgetItem(str(j))
                    self.table.setItem(row, column, newitem)
                else:
                    empty = qw.QTableWidgetItem('')
                    self.table.setItem(row, column, empty)
                row = row + 1
            column = column + 1
        # adjust amount of columns in table
        self.table.setColumnCount(len(column_header))
        # add headers to table
        self.table.setHorizontalHeaderLabels(column_header)





            

        
# Start APP
App = qw.QApplication(sys.argv)
W = GUI()
sys.exit(App.exec)
